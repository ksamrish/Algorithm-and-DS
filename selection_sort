import java.util.Scanner;

public class selection_sort {
	int flag=0,j,min,k=0;
	public int[] selectionsort(int[] array,int n) {
		
	    for(int i=0;i<n-1;i++) {		// this loop progress for (n-1) times 
	    	min=array[i];
	    	for(j=i+1;j<n;j++) {           // finding minimum compared to the current array element, this loop runs from current element upto last element in an array.
	    		if(array[j]<min) {
	    			min=array[j];
	    			k=j;
	    			flag=1;
	    		}
	    	}
	    	if(flag==1) {                 // If min element is found than current element, then swap the both
	    	int temp=array[i];
	    	array[i]=min;
	    	array[k]=temp;
	    }
	    	flag=0;                       // flag is used for finding whether min is found
	    }
	    return array;
	}

	public static void main(String[] args) {
		
		System.out.print("Enter the number of elements in the array:");
	    Scanner input=new Scanner(System.in);
	    int n=input.nextInt();
	    int[] array=new int[n];
	    System.out.println("Enter the array elements to be sorted:");
	    for(int i=0;i<n;i++)
	    {
	       int arrayinput=input.nextInt();
	       array[i]=arrayinput;
	    }
	    System.out.println("\nArray before sorting:");
	    for(int i=0;i<n;i++)
	    {
	        System.out.print(array[i]+"\t");
	    }
		selection_sort obj=new selection_sort();
		obj.selectionsort(array,n);
	    System.out.println("\nSorted array:");
	    for(int i=0;i<n;i++)
	    {
	        System.out.print(array[i]+"\t");    
	    }
	}

}

/* Time complexity:
	O(n*(n-1)/2)
	where n is number of elements in an array

   Space complexity:
   	O(1)
	because we didnt use another array, but constants like i,j,k,min,flag.  so O(constant) which is O(1).
*/
